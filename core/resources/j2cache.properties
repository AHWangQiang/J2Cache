#J2Cache configuration


#########################################
# Cache Broadcast Method
# values:
# jgroups -> use jgroups's multicast
# redis -> use redis publish/subscribe mechanism
#########################################

j2cache.broadcast = redis

#组播的通道名称
jgroups.channel.name = default

#########################################
# Level 1&2 provider 
# values:
# none -> disable this level cache
# ehcache -> use ehcache2 as level 1 cache
# ehcache3 -> use ehcache3 as level 1 cache
# redis -> use redis(hashs) as level 2 cache
# [classname] -> use custom provider 
#########################################

j2cache.L1.provider_class = ehcache
j2cache.L2.provider_class = redis

#########################################
# Cache Serialization Provider
# values:
# fst -> fast-serialization
# kyro -> kyro
# java -> java standard
# json -> fastjson
# pb -> protocol buffers
# [classname implements Serializer]
#########################################

j2cache.serialization = fst

#########################################
# Ehcache configuration
#########################################

ehcache.name=
ehcache.configXml=ehcache.xml

#########################################
# Redis connection configuration
#########################################

## connection
redis.hosts = 127.0.0.1:6379,127.0.0.1:6380,127.0.0.1:6381
redis.timeout = 2000
redis.password =
redis.database = 1

## redis cache namespace optional, default[j2cache]
redis.namespace = j2cache

## redis channel name, \u540C\u4E00\u4E2Aredis server\u5982\u679C\u6709\u591A\u4E2A\u4F7F\u7528J2Cache, \u8BF7\u4FDD\u6301channel name \u7684\u552F\u4E00\u6027
redis.channel = j2cache_channel

## redis pool properties
redis.maxTotal = -1
redis.maxIdle = 2000
redis.maxWaitMillis = 100
redis.minEvictableIdleTimeMillis = 864000000
redis.minIdle = 1000
redis.numTestsPerEvictionRun = 10
redis.lifo = false
redis.softMinEvictableIdleTimeMillis = 10
redis.testOnBorrow = true
redis.testOnReturn = false
redis.testWhileIdle = false
redis.timeBetweenEvictionRunsMillis = 300000
redis.blockWhenExhausted = true
